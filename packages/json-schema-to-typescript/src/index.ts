import { JSONSchema4 } from 'json-schema'
import { ParserOptions as $RefOptions } from '@apidevtools/json-schema-ref-parser'
import type { Options as PrettierOptions } from 'prettier'
import { format } from './formatter'
import { generate } from './generator'
import { normalize } from './normalizer'
import { optimize } from './optimizer'
import { parse } from './parser'
import { dereference, type DereferencedPaths } from './resolver'
import { deepMerge, error, Try } from './utils'
import { validate } from './validator'
import { link } from './linker'
import { validateOptions } from './optionValidator'
import { JSONSchema as LinkedJSONSchema } from './types/JSONSchema'
import yaml from 'js-yaml'

export type { EnumJSONSchema, JSONSchema, NamedEnumJSONSchema, CustomTypeJSONSchema } from './types/JSONSchema'

export interface Options {
  /**
   * [$RefParser](https://github.com/APIDevTools/json-schema-ref-parser) Options, used when resolving `$ref`s
   *
   * If `false`, disable dereferencing
   */
  $refOptions: $RefOptions | false

  /**
   * Default value for additionalProperties, when it is not explicitly set.
   */
  additionalProperties: boolean
  /**
   * Disclaimer comment prepended to the top of each generated file.
   */
  bannerComment: string
  /**
   * Custom function to provide a type name for a given schema
   */
  customName?: (schema: LinkedJSONSchema, keyNameFromDefinition: string | undefined) => string | undefined
  /**
   * Root directory for resolving [`$ref`](https://tools.ietf.org/id/draft-pbryan-zyp-json-ref-03.html)s.
   */
  cwd: string
  /**
   * Declare external schemas referenced via `$ref`?
   */
  declareExternallyReferenced: boolean
  /**
   * Prepend enums with [`const`](https://www.typescriptlang.org/docs/handbook/enums.html#computed-and-constant-members)?
   */
  enableConstEnums: boolean
  /**
   * Create enums from JSON enums with eponymous keys
   */
  inferStringEnumKeysFromValues: boolean
  /**
   * Format code? Set this to `false` to improve performance.
   */
  format: boolean
  /**
   * Ignore maxItems and minItems for `array` types, preventing tuples being generated.
   */
  ignoreMinAndMaxItems: boolean
  /**
   * Maximum number of unioned tuples to emit when representing bounded-size array types,
   * before falling back to emitting unbounded arrays. Increase this to improve precision
   * of emitted types, decrease it to improve performance, or set it to `-1` to ignore
   * `minItems` and `maxItems`.
   */
  maxItems: number
  /**
   * Append all index signatures with `| undefined` so that they are strictly typed.
   *
   * This is required to be compatible with `strictNullChecks`.
   */
  strictIndexSignatures: boolean
  /**
   * A [Prettier](https://prettier.io/docs/en/options.html) configuration.
   */
  style: PrettierOptions
  /**
   * Generate code for `definitions` that aren't referenced by the schema?
   */
  unreachableDefinitions: boolean
  /**
   * Generate unknown type instead of any
   */
  unknownAny: boolean

  /**
   * When `$refOptions` is disabled, this is used to find the original ref id from schema.
   * 
z  * Required for dereferenced schemas to resolve cyclic references
   */
  schemaToId?: DereferencedPaths
}

export const DEFAULT_OPTIONS: Options = {
  $refOptions: {},
  additionalProperties: true, // TODO: default to empty schema (as per spec) instead
  bannerComment: `/* eslint-disable */
/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/`,
  cwd: process.cwd(),
  declareExternallyReferenced: true,
  enableConstEnums: true,
  inferStringEnumKeysFromValues: false,
  format: true,
  ignoreMinAndMaxItems: false,
  maxItems: 20,
  strictIndexSignatures: false,
  style: {
    bracketSpacing: false,
    printWidth: 120,
    semi: true,
    singleQuote: false,
    tabWidth: 2,
    trailingComma: 'none',
    useTabs: false
  },
  unreachableDefinitions: false,
  unknownAny: true
}

export function compileJsonFile(
  file: string | Buffer,
  name: string,
  options: Partial<Options> = DEFAULT_OPTIONS
): Promise<string> {
  const schema = Try(
    () => JSON.parse(getContent(file)),
    () => {
      throw new TypeError(`Error parsing JSON in "${name}"`)
    }
  )

  return compile(schema, name, options)
}

function getContent(file: string | Buffer): string {
  return file.toString()
}

export function compileYamlFile(
  file: string | Buffer,
  name: string,
  options: Partial<Options> = DEFAULT_OPTIONS
): Promise<string> {
  const schema = Try(
    () => yaml.load(getContent(file)) as JSONSchema4,
    () => {
      throw new TypeError(`Error parsing YML in "${name}"`)
    }
  )

  return compile(schema, name, options)
}

export async function compile(schema: JSONSchema4, name: string, options: Partial<Options> = {}): Promise<string> {
  validateOptions(options)

  const _options = deepMerge<Options>({}, DEFAULT_OPTIONS, options)

  // normalize options
  if (!_options.cwd.endsWith('/')) {
    _options.cwd += '/'
  }

  const { dereferencedSchema, dereferencedPaths } =
    _options.$refOptions !== false
      ? await dereference(schema, _options.cwd, _options.$refOptions)
      : { dereferencedSchema: schema, dereferencedPaths: _options.schemaToId }

  const linked = link(dereferencedSchema)

  const errors = validate(linked, name)
  if (errors.length) {
    errors.forEach(_ => error(_))
    throw new ValidationError()
  }

  const normalized = normalize(linked, dereferencedPaths, name, _options)
  const parsed = parse(normalized, _options)
  const optimized = optimize(parsed, _options)
  const generated = generate(optimized, _options)
  const formatted = await format(generated, _options)

  return formatted
}

export class ValidationError extends Error {}
