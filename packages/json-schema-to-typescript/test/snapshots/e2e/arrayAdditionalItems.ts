/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ArrayAdditionalItems {
  namedEums?: {
    additionalItemsAny?: [] | [NamedEnum2, ...unknown[]];
    additionalItems?: [] | [NamedEnum21, ...NamedEnum22[]];
  };
  unnamedEmums?: {
    additionalItemsAny?: [] | [1 | 2 | 3, ...unknown[]];
    additionalItems?: [] | ["One" | "Two" | "Three", ...(4 | 5 | 6)[]];
  };
  namedSchema?: {
    additionalItemsAny?: [] | [StringSchema1] | [StringSchema1, NumberSchema1, ...unknown[]];
    additionalItems?: [] | [StringSchema2] | [StringSchema2, NumberSchema2, ...BooleanSchema1[]];
  };
  schema?: {
    additionalItemsAny?:
      | []
      | [
          {
            foo?: string;
            [k: string]: unknown;
          }
        ]
      | [
          {
            foo?: string;
            [k: string]: unknown;
          },
          {
            bar?: number;
            [k: string]: unknown;
          },
          ...unknown[]
        ];
    additionalItems?:
      | []
      | [
          {
            foo?: string;
            [k: string]: unknown;
          }
        ]
      | [
          {
            foo?: string;
            [k: string]: unknown;
          },
          {
            bar?: number;
            [k: string]: unknown;
          },
          ...{
            baz?: boolean;
            [k: string]: unknown;
          }[]
        ];
  };
  ofType?: {
    additonalItemsAny?: [] | [number] | [number, string, ...unknown[]];
    additonalItems?: [] | [number] | [number, string, ...boolean[]];
  };
  refs?: {
    additionalItemsAny?: [] | [ExampleSchema, ...unknown[]];
    additionalItems?: [] | [ExampleSchema1, ...ExampleSchema2[]];
  };
  defs?: {
    additionalItemsAny?: [] | [FirstDefinition, ...unknown[]];
    additionalItems?: [] | [UnrelatedTitle, ...ThirdDefinition[]];
  };
}
export interface StringSchema1 {
  foo?: string;
  [k: string]: unknown;
}
export interface NumberSchema1 {
  bar?: number;
  [k: string]: unknown;
}
export interface StringSchema2 {
  foo?: string;
  [k: string]: unknown;
}
export interface NumberSchema2 {
  bar?: number;
  [k: string]: unknown;
}
export interface BooleanSchema1 {
  baz?: boolean;
  [k: string]: unknown;
}
export interface ExampleSchema {
  firstName: string;
  lastName: string;
  /**
   * Age in years
   */
  age?: number;
  height?: number;
  favoriteFoods?: unknown[];
  likesDogs?: boolean;
  [k: string]: unknown;
}
export interface ExampleSchema1 {
  firstName: string;
  lastName: string;
  /**
   * Age in years
   */
  age?: number;
  height?: number;
  favoriteFoods?: unknown[];
  likesDogs?: boolean;
  [k: string]: unknown;
}
export interface ExampleSchema2 {
  isConflict: boolean;
}
/**
 * Title matches definition key for kicks
 */
export interface FirstDefinition {
  name?: string;
}
/**
 * Title is unrelated to definition key and behaviour is the same
 */
export interface UnrelatedTitle {
  name?: string;
} /**
 * Definition has no title and produces no duplicate Interface
 */
export interface ThirdDefinition {
  name?: string;
}

export const enum NamedEnum2 {
  One = 1,
  Two = 2,
  Three = 3
}
export const enum NamedEnum21 {
  One = 1,
  Two = 2,
  Three = 3
}
export const enum NamedEnum22 {
  Four = 4,
  Five = 5,
  Six = 6
}
